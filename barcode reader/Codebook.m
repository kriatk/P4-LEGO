function [LGCode, LCode, GCode, RCode, LCodeRev, GCodeRev, RCodeRev] = Codebook
UPSAMPLE_RATE = int32(16); % Parameter
% Function CODEBOOK generats the codebooks for GTIN-13.

%--------------------------------------------------------------------------
% Codebook for the first digit which is encoded in the L/G patterns.
%--------------------------------------------------------------------------
ean_code_sym = [ ...
    'LLLLLL'; ... 
    'LLGLGG'; ...
    'LLGGLG'; ...
    'LLGGGL'; ...
    'LGLLGG'; ...
    'LGGLLG'; ...
    'LGGGLL'; ...
    'LGLGLG'; ...
    'LGLGGL'; ...
    'LGGLGL' ];

LGCode = zeros([10, 6], 'int32');
for iNum = 1: 10
    for iSym = 1: 6
        if ean_code_sym(iNum, iSym) == 'L'
            LGCode(iNum, iSym) = iSym;
        else
            LGCode(iNum, iSym) = iSym + 6;
        end
    end
end

%--------------------------------------------------------------------------
% Codebook for the other 12 digits
%--------------------------------------------------------------------------
lcode_sym = [ ...
    '0001101'; ...
    '0011001'; ...
    '0010011'; ...
    '0111101'; ...
    '0100011'; ...
    '0110001'; ...
    '0101111'; ...
    '0111011'; ...
    '0110111'; ...
    '0001011' ];

gcode_sym = [ ...
    '0100111'; ...
    '0110011'; ...
    '0011011'; ...
    '0100001'; ...
    '0011101'; ...
    '0111001'; ...
    '0000101'; ...
    '0010001'; ...
    '0001001'; ...
    '0010111' ];

rcode_sym = [ ...
    '1110010'; ...
    '1100110'; ...
    '1101100'; ...
    '1000010'; ...
    '1011100'; ...
    '1001110'; ...
    '1010000'; ...
    '1000100'; ...
    '1001000'; ...
    '1110100' ];

[LCode] = convertAndUpsample(lcode_sym, UPSAMPLE_RATE);
[GCode] = convertAndUpsample(gcode_sym, UPSAMPLE_RATE);
[RCode] = convertAndUpsample(rcode_sym, UPSAMPLE_RATE);

[LCodeRev] = reverseCodebook(LCode);
[GCodeRev] = reverseCodebook(GCode);
[RCodeRev] = reverseCodebook(RCode);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Convert the codebook from symbols to digits and upsample them.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [codeExpand] = convertAndUpsample(code_sym, UPSAMPLE_RATE)

numCode = size(code_sym, 1);
lenCode = size(code_sym, 2);
codeExpand = zeros([numCode, lenCode*UPSAMPLE_RATE], 'int32');

for iCode = 1: numCode
    for bit = 1: lenCode
        if code_sym(iCode, bit) == '0'
            val = int32(-1);
        else
            val = int32(1);
        end
        
        for idx = (bit-1)*UPSAMPLE_RATE+1: bit*UPSAMPLE_RATE
            codeExpand(iCode, idx) = val;
        end
    end
end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Reverse the codebook
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [codeRev] = reverseCodebook(code)
codeRev = code;
lenCode = size(code, 2);
for idx = 1: lenCode
    codeRev(:, idx) = code(:, lenCode-idx+1);
end
end