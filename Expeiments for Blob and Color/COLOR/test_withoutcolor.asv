clc
clear


maximumSize= 15000; 
minimumSize= 400; 
thresholdHist = 50;

% create class label library
basic_set = ["blue_6x2";"blue_2x1";"blue_car";"gray_26";"green_4x4";"red_8x4";"red_8x1";"white2x2";"yellow_10x1";"yellow_round"];
extended_set = ["beige_4x2";"beige_8x1";"orange_4x2";"orange_round";"Prop";"red_4x2";"red_round";"violet_4x2";"white_4x2";"yellow_4x2"];
label_library = [basic_set;extended_set];

%% set classifier

%[trainedClassifier, validationAccuracy] = trainClassifier(feature_space) 
% [trainedClassifier, validationAccuracy] = trainClassifier_svm_fg(feature_space)


%% get blobs

I=imread('C:\Users\Stefan_Na\OneDrive\MOE\P4\P4-LEGO\Expeiments for Blob and Color\COLOR\Same_Brick_different_color\2.jpg');
Igray=rgb2gray(I);

% get binary image
binaryImage=histogram_binarymap(I, thresholdHist,minimumSize,maximumSize,1);

stats = regionprops(binaryImage, Igray, 'Area', 'MajorAxisLength', 'MinorAxisLength', 'ConvexArea', 'Eccentricity', 'EquivDiameter', 'Perimeter', 'Solidity', 'MeanIntensity'); %for specific measurments

  %% get color
hsv=rgb2hsv(I);
hue=hsv(:,:,1);
r=regionprops(labeledImage, hue, 'PixelValues');

    for i=1:length(r)
    rgb(i,1).test=1;
    end 
rgb=mergestruct(rgb,r);
[rgb.r] = rgb.PixelValues;
rgb = rmfield(rgb,'PixelValues');
rgb=mergestruct(rgb,g);
[rgb.g] = rgb.PixelValues;
rgb = rmfield(rgb,'PixelValues');
rgb=mergestruct(rgb,b);
[rgb.b] = rgb.PixelValues;
rgb = rmfield(rgb,'PixelValues');
rgb = rmfield(rgb,'test');
allcolor=struct([allcolor;rgb]);
rgb=[];

stats = struct2table(stats);

%% classify    
predictor = trainedClassifier.predictFcn(stats);
%[predictor,NegLoss,PBScore,Posterior] = predict(mdl, stats);